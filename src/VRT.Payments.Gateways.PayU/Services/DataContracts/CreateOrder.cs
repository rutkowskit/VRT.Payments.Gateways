//<auto-generated />

using VRT.Payments.Gateways.Extensions;
using VRT.Payments.Gateways.PayU.Options;

namespace VRT.Payments.Gateways.PayU.Services.DataContracts;
internal static class CreateOrder
{
    internal sealed class Request
    {
        public static Request From(CreateOrderRequest request, PayUOptions options)
        {
            var visibleDescription = request.Description switch
            {
                not null when request.Description.Length > 80 => request.Description.Substring(0, 80),
                _ => request.Description,
            };
            var result = new Request()
            {
                customerIp = request.CustomerIp,
                merchantPosId = options.PointOfSellId,
                description = request.Description,
                visibleDescription = visibleDescription,                
                currencyCode = request.CurrencyCode,
                totalAmount = request.TotalPrice.ToCents().ToString(),
                extOrderId = request.ExtOrderId,
                notifyUrl = request.NotifyUrl,
                continueUrl = request.ContinueUrl,
                
            };
            if (request.Buyer is not null)
            {
                result.buyer = new Shared.Buyer()
                {
                    email = request.Buyer.Email,
                    firstName = request.Buyer.FirstName,
                    lastName = request.Buyer.LastName,
                    extCustomerId = request.Buyer.ExtCustomerId,
                    language = request.Buyer.LanguageIso ?? "pl"
                };
            }
            if (request.LineItems is not null)
            {
                result.products = request.LineItems.Select(x => new Shared.Product()
                {
                    name = x.Name,
                    unitPrice = x.UnitPrice.ToCents().ToString(),
                    quantity = x.Quantity.ToString(),
                    _virtual = x.IsNonPhysical
                }).ToArray();
                result.shoppingCarts = [
                    new Shoppingcart()
                    {
                        amount = request.TotalPrice.ToCents().ToString(),
                        extCustomerId = request.Buyer.ExtCustomerId,
                        products = result.products                        
                    }];
            }
            return result;
        }

        public string continueUrl { get; set; }
        public string notifyUrl { get; set; }
        public string customerIp { get; set; }
        public string merchantPosId { get; set; }
        public string description { get; set; }
        public string additionalDescription { get; set; }
        public string visibleDescription { get; set; }
        public string statementDescription { get; set; }
        public string extOrderId { get; set; }
        public string currencyCode { get; set; }
        public string totalAmount { get; set; }
        public string validityTime { get; set; }
        public string cardOnFile { get; set; }
        public Shared.Buyer buyer { get; set; }
        public Shoppingcart[] shoppingCarts { get; set; }
        public Shared.Product[] products { get; set; }
                  
        public class Shoppingcart
        {
            public string extCustomerId { get; set; }
            public string amount { get; set; }
            public string fee { get; set; }
            public Shippingmethod[] shippingMethods { get; set; }
            public Shared.Product[] products { get; set; }
        }
        public class Shippingmethod
        {
            public string country { get; set; }
            public string price { get; set; }
            public string name { get; set; }
        }
    }

    internal sealed class Response
    {        
        public string redirectUri { get; set; }        
        public string orderId { get; set; }
        public string extOrderId { get; set; }        
        public CreateOrderStatus status { get; set; }
        public class CreateOrderStatus: Shared.Status
        {            
            public string redirectUri { get; set; }
            public string orderId { get; set; }            
            public string extOrderId { get; set; }            
        }        
    }
}
